(() => {
  // Remove if already exists
  const oldUI = document.getElementById('snipeUIConsole');
  if(oldUI) oldUI.remove();

  // Add styles
  const style = document.createElement('style');
  style.textContent = `
    #snipeUIConsole {
      position: fixed;
      top: 100px;
      left: 100px;
      background: #f4f4f4;
      border: 2px solid #888;
      border-radius: 10px;
      padding: 12px 15px;
      z-index: 999999;
      font-family: monospace;
      color: #000;
      width: 280px;
      user-select: none;
      box-shadow: 2px 2px 6px rgba(0,0,0,0.3);
      cursor: move;
    }
    #snipeUIConsole label {
      display: block;
      margin-top: 8px;
      font-weight: bold;
    }
    #snipeUIConsole input[type="text"] {
      width: 100%;
      font-family: monospace;
      font-size: 14px;
      padding: 4px 6px;
      box-sizing: border-box;
      border: 1px solid #ccc;
      border-radius: 4px;
      margin-top: 2px;
    }
    #snipeUIConsole div.countdown {
      font-size: 16px;
      margin-top: 6px;
      color: #222;
      background: #ddd;
      border-radius: 5px;
      padding: 6px 8px;
      text-align: center;
      user-select: text;
    }
    #snipeUIConsole .buttons-row {
      margin-top: 10px;
      display: flex;
      gap: 8px;
      justify-content: space-between;
    }
    #snipeUIConsole button {
      background: none;
      border: none;
      padding: 2px 6px;
      font-size: 14px;
      font-weight: 600;
      cursor: pointer;
      color: #007bff;
      user-select: none;
      border-radius: 3px;
      transition: color 0.2s ease;
      flex: 1;
    }
    #snipeUIConsole button:hover {
      text-decoration: underline;
      color: #0056b3;
    }
  `;
  document.head.appendChild(style);

  // Create container
  const container = document.createElement('div');
  container.id = 'snipeUIConsole';
  container.innerHTML = `
    <label>üéØ Arrival: <input type="text" id="arrivalInput" placeholder="HH:mm:ss:ms" value="09:22:00:120" /></label>
    <label>üöÄ Launch time: <div id="launchTime" style="min-height:20px; margin-top:4px;"></div></label>
    <label>üõë Cancel time: <div id="cancelTime" style="min-height:20px; margin-top:4px;"></div></label>
    <label>üöÄ Launch countdown: <div id="launchCountdown" class="countdown">00:00:00:000</div></label>
    <label>‚è≥ Cancel countdown: <div id="cancelCountdown" class="countdown">00:00:00:000</div></label>
    <div class="buttons-row">
      <button id="startBtn">‚ñ∂Ô∏è Start</button>
      <button id="pauseBtn">‚è∏ Pause</button>
      <button id="copyCancelBtn">üìã Copy Cancel Time</button>
      <button id="resetBtn">üîÑ Reset</button>
    </div>
  `;
  document.body.appendChild(container);

  // Make draggable
  (() => {
    let pos = {top: 0, left: 0, x: 0, y: 0};
    const el = container;

    const mouseDownHandler = function(e) {
      pos = {
        left: el.offsetLeft,
        top: el.offsetTop,
        x: e.clientX,
        y: e.clientY,
      };
      document.addEventListener('mousemove', mouseMoveHandler);
      document.addEventListener('mouseup', mouseUpHandler);
      el.style.cursor = 'grabbing';
      el.style.userSelect = 'none';
    };
    const mouseMoveHandler = function(e) {
      const dx = e.clientX - pos.x;
      const dy = e.clientY - pos.y;
      el.style.left = `${pos.left + dx}px`;
      el.style.top = `${pos.top + dy}px`;
    };
    const mouseUpHandler = function() {
      document.removeEventListener('mousemove', mouseMoveHandler);
      document.removeEventListener('mouseup', mouseUpHandler);
      el.style.cursor = 'move';
      el.style.userSelect = 'auto';
    };
    el.addEventListener('mousedown', mouseDownHandler);
  })();

  // Elements
  const arrivalInput = container.querySelector('#arrivalInput');
  const launchTimeEl = container.querySelector('#launchTime');
  const cancelTimeEl = container.querySelector('#cancelTime');
  const launchCountdownEl = container.querySelector('#launchCountdown');
  const cancelCountdownEl = container.querySelector('#cancelCountdown');

  const startBtn = container.querySelector('#startBtn');
  const pauseBtn = container.querySelector('#pauseBtn');
  const copyCancelBtn = container.querySelector('#copyCancelBtn');
  const resetBtn = container.querySelector('#resetBtn');

  // Sounds (simple beep tone data URI)
  const beepLaunch = new Audio("data:audio/wav;base64,UklGRiQAAABXQVZFZm10IBAAAAABAAEAESsAACJWAAACABAAZGF0YQAAACQ=");
  const beepCancel = new Audio("data:audio/wav;base64,UklGRkIAAABXQVZFZm10IBAAAAABAAEAESsAACJWAAACABAAZGF0YQAAAA==");

  function playBeep(type) {
    if(type === 'launch') {
      beepLaunch.currentTime = 0;
      beepLaunch.play().catch(() => {});
    } else if(type === 'cancel') {
      beepCancel.currentTime = 0;
      beepCancel.play().catch(() => {});
    }
  }

  // Parsing arrival time string HH:mm:ss:ms
  function parseTimeString(str) {
    const parts = str.trim().split(':');
    if(parts.length < 3) return null;
    let [h,m,s,ms] = parts;
    h = parseInt(h); m = parseInt(m); s = parseInt(s); ms = ms ? parseInt(ms) : 0;
    if([h,m,s,ms].some(n => isNaN(n))) return null;
    if(h<0||h>23||m<0||m>59||s<0||s>59||ms<0||ms>999) return null;
    const now = new Date();
    return new Date(now.getFullYear(), now.getMonth(), now.getDate(), h,m,s,ms);
  }

  // Formatting helpers
  function formatTimeWithMs(date) {
    const hh = String(date.getHours()).padStart(2,'0');
    const mm = String(date.getMinutes()).padStart(2,'0');
    const ss = String(date.getSeconds()).padStart(2,'0');
    const ms = String(date.getMilliseconds()).padStart(3,'0');
    return `${hh}:${mm}:${ss}:${ms}`;
  }
  function formatTimeNoMs(date) {
    const hh = String(date.getHours()).padStart(2,'0');
    const mm = String(date.getMinutes()).padStart(2,'0');
    const ss = String(date.getSeconds()).padStart(2,'0');
    return `${hh}:${mm}:${ss}`;
  }
  function formatCountdown(ms) {
    if(ms < 0) ms = 0;
    const h = Math.floor(ms/3600000);
    ms -= h*3600000;
    const m = Math.floor(ms/60000);
    ms -= m*60000;
    const s = Math.floor(ms/1000);
    ms -= s*1000;
    return `${String(h).padStart(2,'0')}:${String(m).padStart(2,'0')}:${String(s).padStart(2,'0')}:${String(ms).padStart(3,'0')}`;
  }

  // Calculate launch & cancel times given arrival, reaction time 10s, max snipe window 8 mins (480s)
  function calculateTimes(arrivalDate) {
    const reactionMs = 10_000; // 10 seconds in ms
    const maxSnipeMs = 480_000; // 8 minutes in ms

    const now = new Date();

    // Time difference between now and arrival in ms
    let diff = arrivalDate - now;

    // Max available snipe window:
    // If diff > maxSnipeMs + reactionMs, use maxSnipeMs
    // else round down diff - reactionMs to nearest even number and split
    let snipeWindowMs;
    if(diff > maxSnipeMs + reactionMs) {
      snipeWindowMs = maxSnipeMs;
    } else {
      let available = diff - reactionMs;
      if(available <= 0) snipeWindowMs = 0;
      else snipeWindowMs = 2 * Math.floor(available/2);
    }

    // Launch time = arrival - snipeWindowMs + 10 ms (minimum)
    let launchTimeMs = arrivalDate.getTime() - snipeWindowMs + 10;
    if(launchTimeMs > arrivalDate.getTime()) launchTimeMs = arrivalDate.getTime();

    // Cancel time = halfway between launch and arrival, rounded to seconds (no ms)
    const cancelTimeMs = Math.round((launchTimeMs + arrivalDate.getTime()) / 2 / 1000) * 1000;

    return {
      launch: new Date(launchTimeMs),
      cancel: new Date(cancelTimeMs),
    };
  }

  // State
  let times = null;
  let timer = null;
  let paused = false;

  // Update UI times and countdowns
  function updateDisplay() {
    if(!times) return;

    // Update times display
    launchTimeEl.textContent = formatTimeWithMs(times.launch);
    cancelTimeEl.textContent = formatTimeNoMs(times.cancel);

    // Calculate countdowns
    const now = new Date();
    const launchDiff = times.launch - now;
    const cancelDiff = times.cancel - now;

    // Launch countdown stops at zero
    launchCountdownEl.textContent = launchDiff > 0 ? formatCountdown(launchDiff) : '00:00:00:000';

    // Cancel countdown counts down normally, can be zero or negative
    cancelCountdownEl.textContent = cancelDiff > 0 ? formatCountdown(cancelDiff) : '00:00:00:000';

    // Beep on launch time (only once)
    if(!paused && launchDiff <= 0 && !launchCountdownEl.classList.contains('beeped-launch')) {
      playBeep('launch');
      launchCountdownEl.classList.add('beeped-launch');
    }

    // Beep on cancel time (only once)
    if(!paused && cancelDiff <= 0 && !cancelCountdownEl.classList.contains('beeped-cancel')) {
      playBeep('cancel');
      cancelCountdownEl.classList.add('beeped-cancel');
    }
  }

  function startTimer() {
    if(timer) clearInterval(timer);
    paused = false;
    launchCountdownEl.classList.remove('beeped-launch');
    cancelCountdownEl.classList.remove('beeped-cancel');

    // Parse input arrival
    const arrivalDate = parseTimeString(arrivalInput.value);
    if(!arrivalDate) {
      alert('Invalid arrival time format. Use HH:mm:ss:ms');
      return;
    }

    times = calculateTimes(arrivalDate);

    updateDisplay();

    timer = setInterval(() => {
      if(!paused) updateDisplay();
    }, 40);
  }

  function pauseTimer() {
    paused = true;
  }

  function resetTimer() {
    if(timer) clearInterval(timer);
    timer = null;
    paused = false;
    times = null;
    launchTimeEl.textContent = '';
    cancelTimeEl.textContent = '';
    launchCountdownEl.textContent = '00:00:00:000';
    cancelCountdownEl.textContent = '00:00:00:000';
    launchCountdownEl.classList.remove('beeped-launch');
    cancelCountdownEl.classList.remove('beeped-cancel');
  }

  function copyCancelTime() {
    if(!times) return;
    const cancelStr = formatTimeNoMs(times.cancel);
    navigator.clipboard.writeText(cancelStr).then(() => {
      alert(`Cancel time copied: ${cancelStr}`);
    }).catch(() => {
      alert('Copy failed.');
    });
  }

  // Button listeners
  startBtn.onclick = () => startTimer();
  pauseBtn.onclick = () => pauseTimer();
  resetBtn.onclick = () => resetTimer();
  copyCancelBtn.onclick = () => copyCancelTime();

})();
